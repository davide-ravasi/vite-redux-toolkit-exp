import { createSlice } from "@reduxjs/toolkit";
import {fetchUsers} from "../thunks/fetchUsers";

const initialState = {
    data: [],
    isLoading: false,
    error: null,
};

// createSlice is a function that accepts an initial state, 
// an object full of reducer functions, and a "slice name", 
// and automatically generates action creators and action types 
// that correspond to the reducers and state.
// https://redux-toolkit.js.org/api/createSlice
const usersSlice = createSlice({
    name: "users", // a string name for this slice
    initialState,   // the initial state value for the reducer
    reducers: {},   // an object containing Redux "case reducer" functions (functions intended to handle a specific action type, equivalent to a single case statement in a switch)
    
    // The `extraReducers` field lets the slice handle actions defined elsewhere, 
    // including actions generated by createAsyncThunk or in other slices.
    // what's the type of `builder`?
    // https://redux-toolkit.js.org/api/createSlice#the-extrareducers-builder-callback-notation
    // his purpose is th watch for the action types dispatched that are not entirely tied to this slice
    extraReducers: (builder) => { // a callback that receives a "builder" object containing methods to define additional action types
        builder.addCase(fetchUsers.pending, (state) => { 
            state.isLoading = true; // state is mutable thanks to immer
        });
        builder.addCase(fetchUsers.fulfilled, (state, action) => {
            state.data = action.payload;
            state.isLoading = false;
        });
        builder.addCase(fetchUsers.rejected, (state, action) => {
            state.error = action.error;
            state.isLoading = false;
        });
    }
});

export default usersSlice.reducer;